/*
 * Copyright 2013-2017 Ray Tsang
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.kordamp.gradle.clirr'

dependencies {
    compile project(':jdeferred-core')

    provided "com.google.code.findbugs:annotations:$findbugsVersion"
    provided "com.google.code.findbugs:jsr305:$findbugsVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.slf4j:slf4j-jdk14:$slf4jVersion"
    testCompile "com.google.android:android:$androidVersion"
}

android {
    compileSdkVersion 16
    buildToolsVersion "19.1.0"
    lintOptions {
        abortOnError false
    }
    defaultConfig {
         minSdkVersion 15
         targetSdkVersion 19
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
    testOptions { 
        unitTests.returnDefaultValues = true
    }
}

task apklib(type: Zip) {
    group 'Build'
    description 'Creates an APKLIB artifact'
    extension = 'apklib'

    from file('src/main/AndroidManifest.xml')
    into('res') {
        from 'res'
    }
    into('src') {
        from 'src'
    }
}

android.libraryVariants.all { variant ->
    def capitalizedVariantName = variant.name.capitalize()

    task("generate${capitalizedVariantName}Javadoc", type: Javadoc) {
        group 'Build'
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        classpath = files(variant.javaCompile.classpath.files) + files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
        options.links('http://docs.oracle.com/javase/7/docs/api/')
        options.links('http://d.android.com/reference/')
        options.addStringOption('Xdoclint:none', '-quiet')
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task("package${capitalizedVariantName}Jar", type: Jar) {
        group 'Build'
        description "An archive of the ${variant.name} compiled code"
        from variant.javaCompile.destinationDir
    }

    if (capitalizedVariantName == 'Release') {
        project.tasks.findByName('clirr').newFiles  = files(project.tasks.findByName('packageReleaseJar').outputs)
        project.tasks.findByName('clirr').dependsOn project.tasks.findByName('packageReleaseJar')
    }

    task("package${capitalizedVariantName}SourcesJar", type: Jar) {
        group 'Build'
        description "An archive of the ${variant.name} source code"
        classifier 'sources'
        from variant.javaCompile.source
    }

    task("package${capitalizedVariantName}JavadocJar", dependsOn: "generate${capitalizedVariantName}Javadoc", type: Jar) {
        group 'Build'
        description "An archive of the ${variant.name} Javadocs"
        classifier 'javadoc'
        from tasks.findByName("generate${capitalizedVariantName}Javadoc").destinationDir
    }

    tasks.findByName("package${capitalizedVariantName}Jar").finalizedBy(tasks.findByName("package${capitalizedVariantName}SourcesJar"))
    tasks.findByName("package${capitalizedVariantName}Jar").finalizedBy(tasks.findByName("package${capitalizedVariantName}JavadocJar"))
    tasks.findByName("bundle${capitalizedVariantName}").finalizedBy(tasks.findByName("package${capitalizedVariantName}Jar"))
}

apply from: rootProject.file('gradle/pom.gradle')
apply from: rootProject.file('gradle/code-quality.gradle')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(file("${buildDir}/libs/${project.name}-${project.version}.jar"))
            artifact(file("${buildDir}/libs/${project.name}-${project.version}-sources.jar")) { classifier 'sources' }
            artifact(file("${buildDir}/libs/${project.name}-${project.version}-javadoc.jar")) { classifier 'javadoc' }

            pom.withXml {
                // all dependencies should use the default scope (compile) but
                // Gradle insists in using runtime as default
                asNode().dependencies.dependency.each { dep ->
                    if (dep.scope.text() == 'runtime') {
                        dep.remove(dep.scope)
                    }
                }
                asNode().children().last() + pomConfig
                asNode().appendNode('description', project.project_description)
                def depNode = asNode().appendNode('dependencies')
                        .appendNode('dependency')
                depNode.appendNode('groupId', project.group)
                depNode.appendNode('artifactId', 'jdeferred-core')
                depNode.appendNode('version', project.version)
            }
        }
        mavenApklib(MavenPublication) {
            artifactId(project.name + '-apklib')
            artifact(apklib)
            pom.withXml {
                asNode().children().last() + pomConfig
                asNode().appendNode('description', project.project_description)
                /*
                def depNode = asNode().appendNode('dependencies')
                        .appendNode('dependency')
                depNode.appendNode('groupId', project.group)
                depNode.appendNode('artifactId', 'jdeferred-core')
                depNode.appendNode('version', project.version)
                */
            }
        }
        mavenAar(MavenPublication) {
            artifactId(project.name + '-aar')
            artifact(bundleRelease)
            pom.withXml {
                asNode().children().last() + pomConfig
                asNode().appendNode('description', project.project_description)
                def depNode = asNode().appendNode('dependencies')
                        .appendNode('dependency')
                depNode.appendNode('groupId', project.group)
                depNode.appendNode('artifactId', 'jdeferred-core')
                depNode.appendNode('version', project.version)
            }
        }
    }
}

bintray {
    user         = project.bintrayUsername
    key          = project.bintrayApiKey
    publications = ['mavenJava', 'mavenApklib', 'mavenAar']
    pkg {
        repo                  = project.project_bintray_repo
        userOrg               = project.project_bintray_org
        name                  = rootProject.name
        desc                  = rootProject.project_description
        licenses              = ['Apache-2.0']
        labels                = ['jdeferred', 'promise', 'android']
        websiteUrl            = project.project_url
        issueTrackerUrl       = project.project_issues
        vcsUrl                = project.project_scm
        publicDownloadNumbers = true
    }
}
