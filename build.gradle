/*
 * Copyright 2013-2017 Ray Tsang
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'net.nemerosa:versioning:2.6.1'
        classpath 'org.kordamp.gradle:clirr-gradle-plugin:0.2.4'
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.11'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'net.nemerosa.versioning'

Date buildTimeAndDate = new Date()
ext {
    buildBy = System.properties['user.name']
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    buildRevision = versioning.info.commit
    buildCreatedBy = "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString()
    projectsWithCoverage = []
    projectsWithClirr = []
}

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = ''
if (!project.hasProperty('bintrayApiKey')) ext.bintrayApiKey = ''

jacoco {
    toolVersion = jacocoVersion
}

allprojects {
    apply plugin: 'base'
    apply plugin: 'idea'
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        jcenter()
    }
}

evaluationDependsOnChildren()

subprojects { subproj ->
    subproj.clirr {
        failOnErrors = false
        enabled      = true
        baseline     = "${project.group}:${project.name}:${project.previousVersion}"
    }

    projectsWithClirr << subproj

    subproj.tasks.findByName('clirr').dependsOn subproj.tasks.findByName('assemble')
}

coveralls {
    sourceDirs = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn            = projectsWithCoverage.test
    group                = 'Reporting'
    description          = 'Aggregate Jacoco coverage reports.'
    additionalSourceDirs = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs)
    sourceDirectories    = files(projectsWithCoverage .sourceSets.main.allSource.srcDirs)
    classDirectories     = files(projectsWithCoverage.sourceSets.main.output)
    executionData        = files(projectsWithCoverage.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        html.destination = "${buildDir}/reports/jacoco/test/html"
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

task compatibilityReport(type: org.kordamp.gradle.clirr.ClirrReportTask) {
    dependsOn = projectsWithClirr.tasks.clirr
    reports = files(projectsWithClirr.findAll{ it.extensions.clirr.enabled }.tasks.clirr.xmlReport)
}